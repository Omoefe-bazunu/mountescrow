rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // MOUNTESCROW RULES
    
    match /users/{userId} {
      allow read, write: if true; // Adjust based on your auth setup
    }
    
    match /wallets/{userId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false; // Disallow client-side writes
    }
    
    match /userWallets/{userId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if false; // Disallow client-side writes
    }
    
    match /proposals/{proposalId} {
       allow read: if request.auth != null && 
         (request.auth.uid == resource.data.buyerId || 
          request.auth.token.email == resource.data.sellerEmail ||
          request.auth.token.email == resource.data.buyerEmail);
       
       allow create: if request.auth != null && (
           (request.auth.uid == request.resource.data.buyerId &&
            request.auth.token.email == request.resource.data.buyerEmail &&
            request.resource.data.status == 'Pending') ||
           (request.auth.token.email == request.resource.data.sellerEmail &&
            request.resource.data.buyerId == null &&
            request.resource.data.status == 'AwaitingBuyerAcceptance')
       );
       
       allow update: if request.auth != null && (
           (request.auth.token.email == resource.data.sellerEmail &&
            resource.data.status == 'Pending' &&
            request.resource.data.status in ['Accepted', 'Declined'] &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
           (request.auth.token.email == resource.data.buyerEmail &&
            resource.data.status == 'AwaitingBuyerAcceptance' &&
            request.resource.data.status == 'Accepted' &&
            request.resource.data.buyerId == request.auth.uid &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'buyerId', 'updatedAt']))
       );
    }
    
    match /deals/{dealId} {
       allow read: if request.auth != null && 
         (request.auth.uid == resource.data.buyerId || 
          request.auth.token.email == resource.data.sellerEmail);
       
       allow create: if request.auth != null && 
         request.auth.token.email == request.resource.data.sellerEmail &&
         request.resource.data.status == "Awaiting Funding" &&
         exists(/databases/$(database)/documents/proposals/$(request.resource.data.proposalId)) &&
         get(/databases/$(database)/documents/proposals/$(request.resource.data.proposalId)).data.status == "Accepted";
       
       allow update: if request.auth != null && 
         (request.auth.uid == resource.data.buyerId || 
          request.auth.token.email == resource.data.sellerEmail);
    }
    
    match /disputes/{disputeId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.disputedBy || 
         request.auth.token.email == resource.data.disputedAgainst);
      
      allow create: if request.auth != null && request.resource.data.disputedBy == request.auth.uid;
      
      allow update: if request.auth != null && request.auth.uid == resource.data.disputedBy;
    }
    
    match /transactions/{transactionId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        allow write: if false;
    }
    
    match /logs/{logId} {
        allow read, write: if false;
    }
    
    match /config/{configId} {
        allow read, write: if false;
    }
  }
}
